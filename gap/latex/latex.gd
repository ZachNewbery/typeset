#
# typeset: Automatic typesetting framework for common GAP objects, with LaTeX generation
#
#! @Chapter &LaTeX; Generation
#!
#! typeset is a package that implements an operation Typeset that can
#! generate LaTeX string representations of a commonly used subset
#! of mathematical objects within the GAP system.
#!
#! Typeset is also built to be incredibly extensible, and can be easily
#! extended to also support the generation of strings for other mark-up
#! languages.
#!
#! @Section LaTeX Generation for &GAP; Objects
#! @Description
#!   Generates a format string that represents the structural definition of the given &GAP;
#!   object <A>obj</A> in &LaTeX;. It contains no parameter values, and will need to be
#!   populated with the arguments representing the semantic values of the object, generated
#!   via <Ref Oper="GenArgs" />, before it can be rendered in a &LaTeX; environment.
#!
#! @Arguments obj
#!
#! @Returns
#!   An Unpopulated &LaTeX; Format String
DeclareOperation("GenLatexTmpl", [ IsObject ]);

#! @Description
#!   Formats a string representation of an entry <A>s</A> returned by
#!   <Ref BookName="ref" Func="CharacterTableDisplayStringEntryDefault" />
#!   to include the &LaTeX;-specific bar environment for complex conjugates.
#!
#! @Arguments s
#!
#! @Returns
#!  A String
DeclareGlobalFunction("CtblEntryLatex");

#! @Description
#!   Generates a string representation of the mathematical substitutions <A>data</A>,
#!   generated by <Ref BookName="ref" Func="CharacterTableDisplayStringEntryDataDefault" />
#!   for entries within a character table.
#!
#! @Arguments data
#!
#! @Returns
#!  A String
DeclareGlobalFunction("CtblLegendLatex");

#! @Description
#!   Generates a string representation of the provided letter string <A>s</A>
#!   correctly subscripted with a &LaTeX; math-mode subscript environment.
#!
#! @Arguments s
#!
#! @Returns
#!  A String
DeclareGlobalFunction("GenNameAssocLetterLatex");

#! @Description
#!   Factorises the string representation of an assoc word in letter representation <A>l</A>,
#!   based on the return value from <Ref BookName="ref" Func="FindSubstringPowers" />, using the
#!   passed list of letters <A>names</A>, and a list of reserved numbers <A>tseed</A> (typically
#!   empty for initial calls).
#!
#!   This method is essentially a LaTeX-specific implementation of the function
#!   <Ref BookName="ref" Func="NiceStringAssocWord" />.
#!
#! @Arguments l, names, tseed
#!
#! @Returns
#!  A Factorised String
DeclareGlobalFunction("FactoriseAssocWordLatex");